library(KMEANS.KNN)
test_check("KMEANS.KNN")
?find_Knn_best_k
?find_Knn_best_k
?find_Knn_best_k
usethis::use_package("class")
?KMEANS.KNN
?find_Knn_best_k
?find_Knn_best_k
usethis::use_package("caret")
usethis::use_package("grDevices")
install.packages("grDevices")
install.packages("grDevices")
find_Knn_best_k <- function(data, target_column, k_values, Prop_train=0.8) {
# Verify that data is a dataframe
assert_that(is.data.frame(data))
# Verify that target_column is a string and exists in data
assert_that(is.character(target_column), target_column %in% names(data))
# Verify that k_values is a numeric vector and contains positive values
assert_that(is.numeric(k_values), all(k_values > 0))
# Verify that Prop_train is a number between 0 and 1
assert_that(is.numeric(Prop_train), Prop_train > 0, Prop_train < 1)
# Split the data into training and test sets
set.seed(123)
index <- createDataPartition(data[[target_column]], p = Prop_train, list = FALSE)
train_data <- data[index, ]
test_data <- data[-index, ]
# Prepare the data for KNN
train_labels <- train_data[[target_column]]
train_data <- train_data[, -which(names(train_data) == target_column)]
test_labels <- test_data[[target_column]]
test_data <- test_data[, -which(names(test_data) == target_column)]
# Normalize the data
train_data <- scale(train_data)
test_data <- scale(test_data)
# Initialize vectors to store accuracies
accuracy_values <- numeric(length(k_values))
for (k in k_values) {
set.seed(123)
pred <- knn(train = train_data, test = test_data, cl = train_labels, k = k)
cm <- confusionMatrix(table(pred, test_labels))
accuracy_values[k] <- cm$overall['Accuracy']
}
best_k <- k_values[which.max(accuracy_values)]
# Return a data frame with the K values and accuracies
result_df <- data.frame(K = k_values, Accuracy = accuracy_values)
return(list(result_df,
Best_K = best_k,Efficacite=max(accuracy_values)))
}
find_Knn_best_k(iris,"Species",1:10,Prop_train=0.8)
library(assertthat)
find_Knn_best_k(iris,"Species",1:10,Prop_train=0.8)
library(assertthat)
library(caret)
find_Knn_best_k(iris,"Species",1:10,Prop_train=0.8)
library(assertthat)
library(caret)
library(class)
find_Knn_best_k(iris,"Species",1:10,Prop_train=0.8)
?find_Knn_best_k
?find_Kmeans_best_k
find_Kmeans_best_k <- function(data, max_k = 10, Method = "coude") {
# Calculate the sum of squared intra-cluster distances (WCSS) for different values of k
wcss <- numeric(max_k)
for (k in 1:max_k) {
kmeans_model <- kmeans(data, centers = k, nstart = 10)
wcss[k] <- kmeans_model$tot.withinss
}
results <- list()
if (Method == "coude") {
# Elbow Method
plot(1:max_k, wcss, type = "b", xlab = "Number of clusters (k)", ylab = "WCSS",
main = "Elbow Method")
abline(v = which.min(diff(wcss)), col = "red", lty = 2)
axis(1, at = 2:max_k, labels = 2:max_k)
cat("Retenir la valeur K se trouvant avant la classe")
# Save the plot to the results list
results$plot <- recordPlot()
# Save the message to the results list
results$message <- "Retenir la valeur K se trouvant avant la classe"
} else if (Method == "silhouette") {
# Silhouette Score
silhouette_scores <- numeric(max_k - 1)
for (k in 2:max_k) {
kmeans_model <- kmeans(data, centers = k, nstart = 10)
# Use the silhouette function to get the scores for each point
sil_scores <- silhouette(kmeans_model$cluster, dist(data))
# Calculate the average silhouette score for the cluster
avg_sil_width <- mean(sil_scores[, "sil_width"])
silhouette_scores[k-1] <- avg_sil_width
}
plot(2:max_k, silhouette_scores, type = "b", xlab = "Number of clusters (k)",
ylab = "Silhouette Score", main = "Silhouette Score")
axis(1, at = 2:max_k, labels = 2:max_k)
optimal_clusters <- which.max(silhouette_scores) + 1
cat("Optimal number of clusters (silhouette score):", optimal_clusters, "\n")
results$plot <- recordPlot()
# Save the message to the results list
results$message <- paste("Optimal number of clusters (silhouette score):", optimal_clusters)
} else if (Method == "gap") {
# Gap Statistics
gap_statistic <- numeric(max_k)
for (k in 1:max_k) {
kmeans_model <- kmeans(data, centers = k, nstart = 10)
gap_statistic[k] <- sum(log(wcss[k])) - log(kmeans_model$tot.withinss)
}
plot(1:max_k, gap_statistic, type = "b", xlab = "Number of clusters (k)",
ylab = "Gap Statistics", main = "Gap Statistics")
axis(1, at = 2:max_k, labels = 2:max_k)
cat("Optimal number of clusters (gap statistics):", which.max(gap_statistic), "\n")
results$plot <- recordPlot()
# Save the message to the results list
results$message <- paste("Optimal number of clusters (gap statistics):", which.max(gap_statistic))
} else {
cat("Unrecognized method. Please choose among 'coude', 'silhouette', or 'gap'.\n")
}
return(results)
}
find_Kmeans_best_k(iris[,-5],9,Method = "coude")
find_Kmeans_best_k(iris[,-5],9,Method = "silhouette")
library(cluster)
library(grDevices)
library(graphics)
find_Kmeans_best_k(iris[,-5],9,Method = "silhouette")
find_Kmeans_best_k <- function(data, max_k = 10, Method = "coude") {
# Calculate the sum of squared intra-cluster distances (WCSS) for different values of k
wcss <- numeric(max_k)
for (k in 1:max_k) {
kmeans_model <- kmeans(data, centers = k, nstart = 10)
wcss[k] <- kmeans_model$tot.withinss
}
results <- list()
if (Method == "coude") {
# Elbow Method
plot(1:max_k, wcss, type = "b", xlab = "Number of clusters (k)", ylab = "WCSS",
main = "Elbow Method")
abline(v = which.min(diff(wcss)), col = "red", lty = 2)
axis(1, at = 2:max_k, labels = 2:max_k)
# Save the plot to the results list
results$plot <- recordPlot()
# Save the message to the results list
results$message <- "Retenir la valeur K se trouvant avant la cassure"
} else if (Method == "silhouette") {
# Silhouette Score
silhouette_scores <- numeric(max_k - 1)
for (k in 2:max_k) {
kmeans_model <- kmeans(data, centers = k, nstart = 10)
# Use the silhouette function to get the scores for each point
sil_scores <- silhouette(kmeans_model$cluster, dist(data))
# Calculate the average silhouette score for the cluster
avg_sil_width <- mean(sil_scores[, "sil_width"])
silhouette_scores[k-1] <- avg_sil_width
}
plot(2:max_k, silhouette_scores, type = "b", xlab = "Number of clusters (k)",
ylab = "Silhouette Score", main = "Silhouette Score")
axis(1, at = 2:max_k, labels = 2:max_k)
optimal_clusters <- which.max(silhouette_scores) + 1
results$plot <- recordPlot()
# Save the message to the results list
results$message <- paste("Optimal number of clusters (silhouette score):", optimal_clusters)
} else if (Method == "gap") {
# Gap Statistics
gap_statistic <- numeric(max_k)
for (k in 1:max_k) {
kmeans_model <- kmeans(data, centers = k, nstart = 10)
gap_statistic[k] <- sum(log(wcss[k])) - log(kmeans_model$tot.withinss)
}
plot(1:max_k, gap_statistic, type = "b", xlab = "Number of clusters (k)",
ylab = "Gap Statistics", main = "Gap Statistics")
axis(1, at = 2:max_k, labels = 2:max_k)
results$plot <- recordPlot()
# Save the message to the results list
results$message <- paste("Optimal number of clusters (gap statistics):", which.max(gap_statistic))
} else {
cat("Unrecognized method. Please choose among 'coude', 'silhouette', or 'gap'.\n")
}
return(results)
}
library(cluster)
library(grDevices)
library(graphics)
find_Kmeans_best_k(iris[,-5],9,Method = "silhouette")
library(cluster)
library(grDevices)
library(graphics)
find_Kmeans_best_k(iris[,-5],9,Method = "gap")
?find_Kmeans_best_k
?find_Kmeans_best_k
usethis::use_testthat()
for (k in k_values) {
pred <- knn(train = train_data, test = test_data, cl = train_labels, k = k)
cm <- confusionMatrix(table(pred, test_labels))
# Corrected indexing for accuracy_values
accuracy_values[which(k_values == k)] <- cm$overall['Accuracy']
}
best_k <- k_values[which.max(accuracy_values)]
?KMEANS.KNN
?find_Knn_best_k
?find_Kmeans_best_k
?find_Kmeans_best_k
?find_Kmeans_best_k
use_readme_md()
usethis::use_readme_md()
usethis::use_lifecycle_badge("experimental")
usethis::use_readme_rmd()
usethis::use_readme_md()
browseVignettes("dplyr")
usethis::use_vignette("myutils")
devtools::build_vignettes()
devtools::load_all(".")
devtools::load_all(".")
rm(list = c("find_Kmeans_best_k", "find_Knn_best_k"))
devtools::load_all(".")
usethis::check_cran()
devtools::submit_cran()
R CMD build
devtools::load_all(".")
vignette <- readRDS("C:/Users/USER/Desktop/KNN.KMEANS/KNN.KMEANS/Meta/vignette.rds")
devtools::submit_cran()
vignette <- readRDS("C:/Users/USER/Desktop/KNN.KMEANS/KNN.KMEANS/Meta/vignette.rds")
devtools::submit_cran()
devtools::submit_cran()
?KMEANS.KNN
devtools::submit_cran()
library(KMEANS.KNN)
?KMEANS.KNN
devtools::submit_cran()
?knn
library(custer)
install.packages("cluster")
library(cluster)
?knn
?kmeans
devtools::submit_cran()
find_Kmeans_best_k <- function(data, max_k = 10, Method = "coude", verbose = FALSE) {
# Calculate the sum of squared intra-cluster distances (WCSS) for different values of k
wcss <- numeric(max_k)
for (k in 1:max_k) {
set.seed(123) # Set seed outside the function for reproducibility
kmeans_model <- kmeans(data, centers = k, nstart = 10)
wcss[k] <- kmeans_model$tot.withinss
}
results <- list()
if (Method == "coude") {
# Elbow Method
plot(1:max_k, wcss, type = "b", xlab = "Number of clusters (k)", ylab = "WCSS",
main = "Elbow Method for Determining Optimal K")
abline(v = which.min(diff(wcss)), col = "red", lty = 2)
axis(1, at = 2:max_k, labels = 2:max_k)
if (verbose) {
message("Retain the K value found before the break")
}
# Save the plot to the results list
results$plot <- recordPlot()
# Save the message to the results list
results$message <- "Retain the K value found before the break"
} else if (Method == "silhouette") {
# Silhouette Method
silhouette_scores <- numeric(max_k - 1)
for (k in 2:max_k) {
set.seed(123) # Set seed outside the function for reproducibility
kmeans_model <- kmeans(data, centers = k, nstart = 10)
sil_scores <- silhouette(kmeans_model$cluster, dist(data))
avg_sil_width <- mean(sil_scores[, "sil_width"])
silhouette_scores[k-1] <- avg_sil_width
}
plot(2:max_k, silhouette_scores, type = "b", xlab = "Number of clusters (k)",
ylab = "Silhouette Score", main = "Silhouette Method for Determining Optimal K")
axis(1, at = 2:max_k, labels = 2:max_k)
optimal_clusters <- which.max(silhouette_scores) + 1
if (verbose) {
message("Optimal number of clusters (silhouette score): ", optimal_clusters)
}
results$plot <- recordPlot()
results$message <- paste("Optimal number of clusters (silhouette score): ", optimal_clusters)
} else if (Method == "gap") {
# Gap Statistics
gap_statistic <- numeric(max_k)
for (k in 1:max_k) {
set.seed(123) # Set seed outside the function for reproducibility
kmeans_model <- kmeans(data, centers = k, nstart = 10)
gap_statistic[k] <- sum(log(wcss[k])) - log(kmeans_model$tot.withinss)
}
plot(1:max_k, gap_statistic, type = "b", xlab = "Number of clusters (k)",
ylab = "Gap Statistics", main = "Gap Statistics for Determining Optimal K")
axis(1, at = 2:max_k, labels = 2:max_k)
if (verbose) {
message("Optimal number of clusters (gap statistics): ", which.max(gap_statistic))
}
results$plot <- recordPlot()
results$message <- paste("Optimal number of clusters (gap statistics): ", which.max(gap_statistic))
} else {
stop("Unrecognized method. Please choose among 'coude', 'silhouette', or 'gap'.")
}
return(results)
}
find_Kmeans_best_k(iris[,-5],9,Method = "gap")
find_Kmeans_best_k <- function(data, max_k = 10, Method = "coude", verbose = FALSE) {
# Calculate the sum of squared intra-cluster distances (WCSS) for different values of k
wcss <- numeric(max_k)
for (k in 1:max_k) {
set.seed(123) # Set seed outside the function for reproducibility
kmeans_model <- kmeans(data, centers = k, nstart = 10)
wcss[k] <- kmeans_model$tot.withinss
}
results <- list()
if (Method == "coude") {
# Elbow Method
plot(1:max_k, wcss, type = "b", xlab = "Number of clusters (k)", ylab = "WCSS",
main = "Elbow Method for Determining Optimal K")
abline(v = which.min(diff(wcss)), col = "red", lty = 2)
axis(1, at = 2:max_k, labels = 2:max_k)
if (verbose) {
message("Retain the K value found before the break")
}
# Save the plot to the results list
results$plot <- recordPlot()
# Save the message to the results list
results$message <- "Retain the K value found before the break"
} else if (Method == "silhouette") {
# Silhouette Method
silhouette_scores <- numeric(max_k - 1)
for (k in 2:max_k) {
set.seed(123) # Set seed outside the function for reproducibility
kmeans_model <- kmeans(data, centers = k, nstart = 10)
sil_scores <- silhouette(kmeans_model$cluster, dist(data))
avg_sil_width <- mean(sil_scores[, "sil_width"])
silhouette_scores[k-1] <- avg_sil_width
}
plot(2:max_k, silhouette_scores, type = "b", xlab = "Number of clusters (k)",
ylab = "Silhouette Score", main = "Silhouette Method for Determining Optimal K")
axis(1, at = 2:max_k, labels = 2:max_k)
optimal_clusters <- which.max(silhouette_scores) + 1
if (verbose) {
message("Optimal number of clusters (silhouette score): ", optimal_clusters)
}
results$plot <- recordPlot()
results$message <- paste("Optimal number of clusters (silhouette score): ", optimal_clusters)
} else if (Method == "gap") {
# Gap Statistics
gap_statistic <- numeric(max_k)
for (k in 1:max_k) {
set.seed(123) # Set seed outside the function for reproducibility
kmeans_model <- kmeans(data, centers = k, nstart = 10)
gap_statistic[k] <- sum(log(wcss[k])) - log(kmeans_model$tot.withinss)
}
plot(1:max_k, gap_statistic, type = "b", xlab = "Number of clusters (k)",
ylab = "Gap Statistics", main = "Gap Statistics for Determining Optimal K")
axis(1, at = 2:max_k, labels = 2:max_k)
if (verbose) {
message("Optimal number of clusters (gap statistics): ", which.max(gap_statistic))
}
results$plot <- recordPlot()
results$message <- paste("Optimal number of clusters (gap statistics): ", which.max(gap_statistic))
} else {
stop("Unrecognized method. Please choose among 'coude', 'silhouette', or 'gap'.")
}
return(results)
}
find_Kmeans_best_k(iris[,-5],9,Method = "coude")
find_Kmeans_best_k <- function(data, max_k = 10, Method = "coude", verbose = FALSE) {
# Calculate the sum of squared intra-cluster distances (WCSS) for different values of k
wcss <- numeric(max_k)
for (k in 1:max_k) {
set.seed(123) # Set seed outside the function for reproducibility
kmeans_model <- kmeans(data, centers = k, nstart = 10)
wcss[k] <- kmeans_model$tot.withinss
}
results <- list()
if (Method == "coude") {
# Elbow Method
plot(1:max_k, wcss, type = "b", xlab = "Number of clusters (k)", ylab = "WCSS",
main = "Elbow Method for Determining Optimal K")
abline(v = which.min(diff(wcss)), col = "red", lty = 2)
axis(1, at = 2:max_k, labels = 2:max_k)
if (verbose) {
message("Retain the K value found before the break")
}
# Save the plot to the results list
results$plot <- recordPlot()
# Save the message to the results list
results$message <- "Retain the K value found before the break"
} else if (Method == "silhouette") {
# Silhouette Method
silhouette_scores <- numeric(max_k - 1)
for (k in 2:max_k) {
set.seed(123) # Set seed outside the function for reproducibility
kmeans_model <- kmeans(data, centers = k, nstart = 10)
sil_scores <- silhouette(kmeans_model$cluster, dist(data))
avg_sil_width <- mean(sil_scores[, "sil_width"])
silhouette_scores[k-1] <- avg_sil_width
}
plot(2:max_k, silhouette_scores, type = "b", xlab = "Number of clusters (k)",
ylab = "Silhouette Score", main = "Silhouette Method for Determining Optimal K")
axis(1, at = 2:max_k, labels = 2:max_k)
optimal_clusters <- which.max(silhouette_scores) + 1
if (verbose) {
message("Optimal number of clusters (silhouette score): ", optimal_clusters)
}
results$plot <- recordPlot()
results$message <- paste("Optimal number of clusters (silhouette score): ", optimal_clusters)
} else if (Method == "gap") {
# Gap Statistics
gap_statistic <- numeric(max_k)
for (k in 1:max_k) {
set.seed(123) # Set seed outside the function for reproducibility
kmeans_model <- kmeans(data, centers = k, nstart = 10)
gap_statistic[k] <- sum(log(wcss[k])) - log(kmeans_model$tot.withinss)
}
plot(1:max_k, gap_statistic, type = "b", xlab = "Number of clusters (k)",
ylab = "Gap Statistics", main = "Gap Statistics for Determining Optimal K")
axis(1, at = 2:max_k, labels = 2:max_k)
if (verbose) {
message("Optimal number of clusters (gap statistics): ", which.max(gap_statistic))
}
results$plot <- recordPlot()
results$message <- paste("Optimal number of clusters (gap statistics): ", which.max(gap_statistic))
} else {
stop("Unrecognized method. Please choose among 'coude', 'silhouette', or 'gap'.")
}
return(results)
}
find_Kmeans_best_k(iris[,-5],9,Method = "silhouette")
find_Kmeans_best_k <- function(data, max_k = 10, Method = "coude", verbose = FALSE) {
# Calculate the sum of squared intra-cluster distances (WCSS) for different values of k
wcss <- numeric(max_k)
for (k in 1:max_k) {
set.seed(123) # Set seed outside the function for reproducibility
kmeans_model <- kmeans(data, centers = k, nstart = 10)
wcss[k] <- kmeans_model$tot.withinss
}
results <- list()
if (Method == "coude") {
# Elbow Method
plot(1:max_k, wcss, type = "b", xlab = "Number of clusters (k)", ylab = "WCSS",
main = "Elbow Method for Determining Optimal K")
abline(v = which.min(diff(wcss)), col = "red", lty = 2)
axis(1, at = 2:max_k, labels = 2:max_k)
if (verbose) {
message("Retain the K value found before the break")
}
# Save the plot to the results list
results$plot <- recordPlot()
# Save the message to the results list
results$message <- "Retain the K value found before the break"
} else if (Method == "silhouette") {
# Silhouette Method
silhouette_scores <- numeric(max_k - 1)
for (k in 2:max_k) {
set.seed(123) # Set seed outside the function for reproducibility
kmeans_model <- kmeans(data, centers = k, nstart = 10)
sil_scores <- silhouette(kmeans_model$cluster, dist(data))
avg_sil_width <- mean(sil_scores[, "sil_width"])
silhouette_scores[k-1] <- avg_sil_width
}
plot(2:max_k, silhouette_scores, type = "b", xlab = "Number of clusters (k)",
ylab = "Silhouette Score", main = "Silhouette Method for Determining Optimal K")
axis(1, at = 2:max_k, labels = 2:max_k)
optimal_clusters <- which.max(silhouette_scores) + 1
if (verbose) {
message("Optimal number of clusters (silhouette score): ", optimal_clusters)
}
results$plot <- recordPlot()
results$message <- paste("Optimal number of clusters (silhouette score): ", optimal_clusters)
} else if (Method == "gap") {
# Gap Statistics
gap_statistic <- numeric(max_k)
for (k in 1:max_k) {
set.seed(123) # Set seed outside the function for reproducibility
kmeans_model <- kmeans(data, centers = k, nstart = 10)
gap_statistic[k] <- sum(log(wcss[k])) - log(kmeans_model$tot.withinss)
}
plot(1:max_k, gap_statistic, type = "b", xlab = "Number of clusters (k)",
ylab = "Gap Statistics", main = "Gap Statistics for Determining Optimal K")
axis(1, at = 2:max_k, labels = 2:max_k)
if (verbose) {
message("Optimal number of clusters (gap statistics): ", which.max(gap_statistic))
}
results$plot <- recordPlot()
results$message <- paste("Optimal number of clusters (gap statistics): ", which.max(gap_statistic))
} else {
stop("Unrecognized method. Please choose among 'coude', 'silhouette', or 'gap'.")
}
return(results)
}
find_Kmeans_best_k(iris[,-5],9,Method = "silhouette")
library(cluster)
find_Kmeans_best_k(iris[,-5],9,Method = "silhouette")
devtools::submit_cran()
devtools::submit_cran()
devtools::submit_cran()
devtools::submit_cran()
devtools::submit_cran()
R CMD check --as-cran
devtools::submit_cran()
devtools::submit_cran()
?stats
?cluster
?factor
?kmeans
?KMEANS.KNN
remotes::install_github("KMEANS.KNN", build_vignettes = TRUE)
usethis::use_pkgdown()
pkgdown::build_site()
remotes::install_github("multiple", build_vignettes = TRUE)
remotes::install_github("KMEANS.KNN", build_vignettes = TRUE)
install.packages("remotes")
remotes::install_github("KMEANS.KNN", build_vignettes = TRUE)
usethis::use_vignette("KMEANS.KNN")
devtools::build_vignettes("KMEANS.KNN")
remotes::install_github("KMEANS.KNN", build_vignettes = TRUE)
``` r
